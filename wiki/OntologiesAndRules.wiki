#sidebar TableOfContent
<wiki:toc/>
<h1>Ontologies and rules</h1>

=Introduction=

Like HTML tells to browsers how to present your text and images, ontologies tell semantic tools like search engines how to reason with your data.

The first conversion step ignores ontologies: it just turns gedcom tags into predicates and object classes. This approach results into conflicts, for example the title of a person is another concept (social rank: Mrs., Dr., Sir) than the title of a multimedia object which is rather a catchy phrase. 
However, with [http://jena.apache.org/documentation/inference/index.html#rules jena's rules]http://gedcom2sem.googlecode.com/svn/trunk/wiki-images/icon_external_link_blue.png 
you can derive new statements that respect an ontology of your choice. Drop the original statements for a valid semantic document. Thus you can model the data any way you want. Some ontologies that surfaced from a quick survey:
  * http://www.daml.org/2001/01/gedcom/gedcom is simple but uses only a fraction of the information that can be stored in a gedcom. It has an apparently abandoned [http://web.archive.org/web/20041214001231/http://orlando.drc.com/daml/Ontology/Genealogy/3.1/Gentology-ont.daml variant]http://gedcom2sem.googlecode.com/svn/trunk/wiki-images/icon_external_link_blue.png. More background on http://jay.askren.net/Projects/SemWeb/
  * http://purl.org/vocab/bio together with [http://www.xml.com/pub/a/2004/02/04/foaf.html foaf]http://gedcom2sem.googlecode.com/svn/trunk/wiki-images/icon_external_link_blue.png seems to pretty much cover most of a gedcom file.
  * [http://protege.cim3.net/file/pub/ontologies/generations/generations.owl generations.owl]http://gedcom2sem.googlecode.com/svn/trunk/wiki-images/icon_external_link_blue.png or [http://protege.cim3.net/file/pub/ontologies/family.swrl.owl/family.swrl.owl family.swrl.owl]http://gedcom2sem.googlecode.com/svn/trunk/wiki-images/icon_external_link_blue.png for additional relations

=Status=

An [https://code.google.com/p/gedcom2sem/source/browse/trunk/src/main/java/gedcom2sem/gedsem/Publish.java experimental alternative] for the convert command drops the original statements. A mapping to [https://code.google.com/p/gedcom2sem/source/browse/trunk/src/main/resources/rules/foafRules.txt foaf/bio] statements is under development. See the built in [http://jena.apache.org/documentation/inference/index.html#RULEbuiltins primitives]http://gedcom2sem.googlecode.com/svn/trunk/wiki-images/icon_external_link_blue.png
for more tricks.

The [https://code.google.com/p/gedcom2sem/source/browse/trunk/src/main/resources/rules/BasicRules.txt basic rules] and [https://code.google.com/p/gedcom2sem/source/browse/trunk/src/main/resources/rules/AdditionalRules.txt additional rules] were designed to simplify writing reports without any consideration about ontologies. Do not drop the original statements in this case. NB: specify the additional rules after the basic rules.

= Customization =

Ontologies give you leeway to model your data to your own taste or for some practical purpose. For example if a parent is male, you don't need to specify it is a father. If someone is a father, you don't need to specify he is male. With a proper ontology reasoners can deduce the same information in both cases. So the rules supplied in this project are just examples. However some of the supplied queries rely on some of the rules, their comment headers tells if and which.

Other details depend on what you do with and in your gedcom. These details are discussed in this chapter to help you construct additional rule files.

== Published gedcom ==

When you upload your gedcom to some community or publish it yourself, you might want to link to that publication with an additional rule. In the following examples you should replace at least `SOMENAME` with a value related to your account or publication. 

*ancestry.com*
{{{
[
  (?indi rdf:type  t:INDI)
  (?indi p:id ?i)
  regex(?i, '@(.*)@.*', ?id)
  uriConcat("http://wc.rootsweb.ancestry.com/cgi-bin/igm.cgi?op=GET&db=SOMENAME&id=", ?id, ?url)
->
  (?indi http://xmlns.com/foaf/0.1/isPrimaryTopicOf ?url  )
]
}}}

*genealogieonline.nl*
{{{
[
  (?indi rdf:type  t:INDI)
  (?indi p:id ?i)
  regex(?i, '@(.*)@.*', ?id)
  uriConcat("http://www.genealogieonline.nl/SOMENAME/", ?id, ".php", ?url)
->
  (?indi http://xmlns.com/foaf/0.1/isPrimaryTopicOf ?url  )
]
}}}

== Identification ==

See "identifying marks" in this [http://www.xml.com/pub/a/2004/02/04/foaf.html Introduction to FOAF]. It explains how the above primary-topic statements are identifications for the persons.

== Notes, sources and multimedia objects ==

The meaning of these gedcom properties may vary with individual or project conventions. So no default rules can be specified to model them. 

Let us assume a convention to put URLs in the source tag of the gedcom whenever possible. For example http://familysearch.org/pal:/MM9.3.1/TH-1-11324-36479-63 
with birth certificates. The URL used to have a question mark and some parameters, it appears in this case these can be stripped from the URL and replaced with something like "#112". The replacement has no function than to indicate the certificate number on the digitized page to human readers and still have a valid URL. 

The following rule links your gedcom data with the digitized page. 
{{{
[
  (?entity p:BIRT ?event)
  (?birth p:SOUR ?s)
  (?s rdfs:label ?uri)
  regex(?uri, '(https?://familysearch.org/pal:.*)#(.*)', ?plainURL, ?certificateNr)
  print(?plainURL, ?certificateNr)
  bound(?plainURL)
->
  (?uri rdf:about ?event)  
]
}}}
The question mark after https makes the s optional, both forms of the URLs work. For the new statement rdf:about is used, foaf:isPrimaryTopicOf is clearly not applicable as there are more certificates on the digitized page. The regular expression extracts the mandatory part of the URL and the added certificate number. Suggestions are welcome to model the certificate number differently.