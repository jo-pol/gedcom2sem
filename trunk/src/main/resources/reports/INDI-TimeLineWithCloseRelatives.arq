##################################################################################################
# Copyright 2013, J. Pol 
# This file is part of free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation.
# This package is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details. A copy of the GNU General Public License is available at <http://www.gnu.org/licenses/>.
##################################################################################################
#
# timeline with parents, spouses, siblings, children and in laws.
#
# replace the value for "?principal p:ID"
# or launch from a family context
#
# Apply basic rules, don't drop original statements.
#
###############################################

### external data
PREFIX rdf:          <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
PREFIX rdfs:         <http://www.w3.org/2000/01/rdf-schema#> 
PREFIX xsd:          <http://www.w3.org/2001/XMLSchema#> 

### converted gedcom
PREFIX t: <http://purl.org/vocab/vnd/gedcom2sem.googlecode.com/2013-01-13/GedcomTags/type#> 
PREFIX r: <http://purl.org/vocab/vnd/gedcom2sem.googlecode.com/2013-01-13/GedcomTags/rule#> 
PREFIX p: <http://purl.org/vocab/vnd/gedcom2sem.googlecode.com/2013-01-13/GedcomTags/predicate#> 

### language extensions
PREFIX  fn: <http://www.w3.org/2005/xpath-functions#> 
PREFIX afn: <http://jena.hpl.hp.com/ARQ/function#> 
PREFIX apf: <http://jena.hpl.hp.com/ARQ/property#> 

###############################################
SELECT DISTINCT 
  (str(xsd:int(fn:substring(str(?eventDate),1,4)) - xsd:int(?birthYear))  as ?age)
  (fn:substring(str(?eventDate),1,10) as ?date)
  ?sex
  ?relation
  ?event
  ?name
{
  ### for which individual do you want the close relatives?

  ?principal p:id '%s'.

  ### required for age computation

  OPTIONAL
  {
    ?principal p:BIRT [p:DATE [rdfs:label ?birthDate]].
    LET(?birthYear := fn:substring(str(?birthDate),1,4) ).
  }

  ### the persons related to the principal
  {
    {
      {LET (?relation := 'parent'        ) ?principal r:parent                  ?relative.}UNION
      {LET (?relation := 'parent in law' ) ?principal r:spouse  ?s. ?s r:parent ?relative.}UNION
      {LET (?relation := 'child'         ) ?principal r:child                   ?relative.}UNION
      {LET (?relation := 'child in law'  ) ?principal r:child   ?c. ?c r:spouse ?relative.}UNION
      {LET (?relation := 'sibling'       ) ?principal r:sibling                 ?relative.}UNION
      {LET (?relation := 'sibling in law') ?principal r:sibling ?s. ?s r:spouse ?relative.}UNION
      {LET (?relation := 'spouse'        ) ?principal r:spouse                  ?relative.}UNION
      {LET (?relation := ' '             ). LET (?relative := ?principal)                 } 
    } 
    {
      {LET (?event := 'birth') ?relative p:BIRT [p:DATE [rdfs:label ?eventDate]].}UNION
      {LET (?event := 'death') ?relative p:DEAT [p:DATE [rdfs:label ?eventDate]].}
    }
    ?relative p:SEX  [rdfs:label ?sex];
              p:NAME [rdfs:label ?name].
  } UNION

  ### the couples related to the principal
  {
    {
      {LET (?relation := 'parents'       ) ?principal r:parent  ?p. ?p p:FAMS ?relative.}UNION
      {LET (?relation := 'parents in law') ?principal r:spouse  ?s.
                                                   ?s r:parent  ?p. ?p p:FAMS ?relative.}UNION
      {LET (?relation := 'sibling'       ) ?principal r:sibling ?p. ?p p:FAMS ?relative.}UNION
      {LET (?relation := 'child'         ) ?principal r:child   ?c. ?c p:FAMS ?relative.}UNION
      {LET (?relation := ' '             ) ?principal                  p:FAMS ?relative.}
    }
    {
      {LET (?event := 'mariage') ?relative p:MARR [p:DATE [rdfs:label ?eventDate]].}UNION
      {LET (?event := 'divorce') ?relative p:DIV  [p:DATE [rdfs:label ?eventDate]].}
    }
    ?relative p:HUSB [p:NAME [rdfs:label ?nameHusband] ];
              p:WIFE [p:NAME [rdfs:label ?nameWife   ] ].
    LET (?sex := ' ')
    LET (?name := fn:concat(?nameHusband," --- ",?nameWife))
  }
}
ORDER BY ?eventDate
